name: Generate Changelog

inputs:
  repository:
    required: true
  commits:
    required: true
  previous_tag:
    required: true
  new_tag:
    required: true

outputs:
  changelog:
    description: Markdown changelog
    value: ${{ steps.log.outputs.changelog }}

runs:
  using: composite
  steps:
    - name: Generate grouped changelog
      id: log
      shell: bash
      run: |
        echo "🔧 Generating changelog..."
        declare -A sections
        sections=(
          [breaking]="### 💥 Breaking Changes"
          [feat]="### ✨ Features"
          [fix]="### 🐞 Fixes"
          [chore]="### 🔧 Chores"
          [docs]="### 📚 Documentation"
          [refactor]="### 🔄 Refactors"
          [test]="### ✅ Tests"
        )
        
        # Declare an associative array for grouped commits by type
        declare -A grouped
        declare -A seen_commits  # To track already seen commit messages (avoiding duplicates)
        
        # Loop through commits and group them by type (feat, fix, etc.)
        while IFS='|' read -r subject body; do
          # Extract the type of the commit (feat, fix, docs, etc.)
          type=$(echo "$subject" | cut -d: -f1)
          
          # Only group commits of recognized types (feat, fix, etc.)
          if [[ -n "$type" && "${sections[$type]}" ]]; then
            # Check for duplicates (if already seen)
            if [[ -z "${seen_commits[$subject]}" ]]; then
              # Add the commit subject to the corresponding type section and mark as seen
              grouped[$type]+="- $subject\\n"
              seen_commits[$subject]=1  # Mark this commit as seen
            fi
          fi
        done <<< "${{ inputs.commits }}"

        
        # Start creating the changelog with previous and new tags
        changelog="### 🧾 Changes from \`${{ inputs.previous_tag }}\` → \`${{ inputs.new_tag }}\`\n"
        changelog+="[see changes](https://github.com/${{ github.repository }}/compare/${{ inputs.previous_tag }}...${{ inputs.new_tag }})\n\n"
        
        # Add grouped commits to the changelog under the appropriate section
        for key in "${!sections[@]}"; do
          if [[ -n "${grouped[$key]}" ]]; then
            changelog+="${sections[$key]}\\n${grouped[$key]}\\n"
          fi
        done
        
        # Output the changelog as the result
        echo "has_changes=true" >> $GITHUB_OUTPUT
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo -e "$changelog" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
