# ------------------------------------------------------------------------------
# Composite Action: Generate Changelog
#
# This action generates a formatted changelog from commit messages, categorizing
# them based on conventional commit types (feat, fix, docs, etc.).
#
# The action uses the parse-commits-input action to process the commit data
# and then processes the commits to generate a structured changelog.
#
# Inputs:
# - commits: String containing commit data to process (subject§body format)
# - previous_tag: Previous version tag for comparison link
# - new_tag: New version tag for the changelog
# - repository: Repository name for generating links
#
# Outputs:
# - changelog: Generated changelog content in Markdown format
# ------------------------------------------------------------------------------

name: Generate Changelog

inputs:
  repository:
    required: true
    description: Repository name
  commits:
    required: true
    description: Multiline string containing commit data to process
  previous_tag:
    required: true
    description: Previous version tag
  new_tag:
    required: true
    description: New version tag


outputs:
  changelog:
    description: Markdown changelog
    value: ${{ steps.log.outputs.changelog }}

runs:
  using: composite
  steps:
    - name: Generate grouped changelog
      id: log
      shell: bash
      run: |
        echo "🔧 Generating changelog..."
        declare -A sections
        sections=(
          [breaking]="### 💥 Breaking Changes"
          [feat]="### ✨ Features"
          [fix]="### 🐞 Fixes"
          [chore]="### 🔧 Chores"
          [docs]="### 📚 Documentation"
          [refactor]="### 🔄 Refactors"
          [test]="### ✅ Tests"
          [style]="### 💎 Styles"
          [refactor]="### 📦 Refactor"
          [perf]="### 🚀 Performance"
          [test]="### 🚨 Tests"
          [build]="### 🛠️ Build"
          [ci]="### 🔧 CI"
          [chore]="### ♻️ Chore"
          [revert]="### ⏪ Reverts"
        )
        
        # Declare an associative array for grouped commits by type
        declare -A grouped
        declare -A seen_commits  # To track already seen commit messages (avoiding duplicates)
        
        # Loop through commits and group them by type (feat, fix, etc.)
        # Loop through commits and group them by type (feat, fix, etc.)
        while IFS='|' read -r subject body; do
          # Extract the raw type from the commit subject
          raw_type=$(echo "$subject" | cut -d: -f1)
        
          # Strip '!' if it's a breaking change
          type=$(echo "$raw_type" | sed 's/!$//')
        
          if [[ "$type" == "fixes" ]]; then
            type="fix"
          fi
  
          # Only group commits of recognized types (feat, fix, etc.)
          if [[ -n "$type" && "${sections[$type]}" ]]; then
            # Check for duplicates (if already seen)
            if [[ -z "${seen_commits[$subject]}" ]]; then
              if [[ "$raw_type" == *"!" ]]; then
                # Breaking change — group under `breaking`
                grouped[breaking]+="- $subject\\n"
              else
                # Normal type-based grouping
                grouped[$type]+="- $subject\\n"
              fi
              seen_commits[$subject]=1  # Mark this commit as seen
            fi
          fi
        done <<< "${{ inputs.commits }}"

        
        # Start creating the changelog with previous and new tags
        changelog="### 🧾 Changes from \`${{ inputs.previous_tag }}\` → \`${{ inputs.new_tag }}\`\n"
        changelog+="[see changes](https://github.com/${{ inputs.repository }}/compare/${{ inputs.previous_tag }}...${{ inputs.new_tag }})\n\n"
        
        # Add grouped commits to the changelog under the appropriate section
        for key in "${!sections[@]}"; do
          if [[ -n "${grouped[$key]}" ]]; then
            changelog+="${sections[$key]}\\n${grouped[$key]}\\n"
          fi
        done
        
        # Output the changelog as the result
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo -e "$changelog" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
